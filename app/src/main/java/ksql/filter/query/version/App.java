/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ksql.filter.query.version;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.kstream.KStream;

import java.util.Map;
import java.util.Properties;

public class App {

    public static void main(String[] args) throws InterruptedException {
        ObjectMapper mapper = new ObjectMapper();
        Properties streamsConfiguration = new Properties();
        streamsConfiguration.put(
                StreamsConfig.APPLICATION_ID_CONFIG,
                "backup99");
        streamsConfiguration.put(
                StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,
                "127.0.0.1:9092");
        streamsConfiguration.put(
                StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG,
                Serdes.String().getClass().getName());
        streamsConfiguration.put(
                StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG,
                Serdes.String().getClass().getName());
        StreamsBuilder builder = new StreamsBuilder();
        KStream<String, String> source = builder.stream("bk1");
        KStream<String, String> peek = source.peek((key, value) -> {
            System.out.println(value);
            System.out.println(key);
        });
        KStream<String, String> filtered = peek.filter((key, value) -> {
            try {
                Map recordValue = mapper.readValue(value,Map.class);
                return (int) recordValue.get("version") < 18;
            } catch (JsonProcessingException e) {
                throw new RuntimeException(e);
            }
        });
        KStream<String, String> filtered2 = filtered.filter((key, value) -> {
            return !value.contains("CREATE STREAM KSQL_PROCESSING_LOG");
        });
        filtered2.to("_confluent-ksql-default__command_topic");
        Topology topology = builder.build();
        KafkaStreams streams = new KafkaStreams(topology, streamsConfiguration);
        streams.start();

        Thread.sleep(30000);
        streams.close();
    }
}
